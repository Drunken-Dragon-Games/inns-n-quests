on: 
  push:
    branches:
    - '*'
    - '!preprod'
    - '!mainnet'
name: Build Test Service
jobs:

  Build-Test-Service:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
        deno-version: [1.34.x]

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: service_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
          POSTGRES_PORT: 5432
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 1s
          --health-timeout 5s
          --health-retries 5

    steps:

    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Backend - build and test
      working-directory: backend
      env:
        POLICY_DRAGON_SILVER: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
        POLICY_PIXEL_TILES: bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
        POLICY_GMAS: cccccccccccccccccccccccccccccccccccccccccccccccccccccccc
        POLICY_THIOLDEN: dddddddddddddddddddddddddddddddddddddddddddddddddddddddd
        POLICY_EMOJIS: eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
        POLICY_SLIMES: ffffffffffffffffffffffffffffffffffffffffffffffffffffffff
        POLICY_FURNITURE: gggggggggggggggggggggggggggggggggggggggggggggggggggggggg
      run: |
        npm ci
        npm run build
        npm test

    - name: Setup Deno ${{ matrix.deno-version }}
      uses: denoland/setup-deno@v1.1.2
      with:
        deno-version: ${{ matrix.deno-version }}
    
    - name: Blockchain - build and test
      working-directory: blockchain
      run: |
        deno lint src --rules-exclude=no-unused-vars,require-await

  #  - name: Frontend - build and test
  #    working-directory: frontend
  #    run: |
  #      npm ci
  #      npm run build
