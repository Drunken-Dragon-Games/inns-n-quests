import { scryptSync, randomBytes, createCipheriv, createDecipheriv, BinaryLike } from "node:crypto"
import { Buffer } from "https://deno.land/std@0.192.0/io/buffer.ts"



export class AES256 {
	private key: Uint8Array

	constructor(options: { salt: BinaryLike, password: BinaryLike }) {
		this.key = new Uint8Array(scryptSync(options.password, options.salt, 32))
	}


	decrypt(text: string): string {
		const ivd = JSON.parse(text) as { iv: string, d: string }
		const iv = this.hexToUint8Array(ivd.iv)
		const encryptedText = this.hexToUint8Array(ivd.d)
		const decipher = createDecipheriv('aes-256-cbc', this.key, iv)
		let decrypted = new Uint8Array(decipher.update(encryptedText))
		decrypted = new Uint8Array([...decrypted, ...decipher.final()])
		return new TextDecoder().decode(decrypted)
	}

	//Funciton generated by GPT-4
	private hexToUint8Array(hexString: string): Uint8Array {
		const length = hexString.length
  		const uint8Array = new Uint8Array(length / 2)

  		for (let i = 0; i < length; i+=2) {
    		uint8Array[i / 2] = parseInt(hexString.substring(i, i+2), 16)
  		}

  		return uint8Array
	}
}
